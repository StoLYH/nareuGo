spring:
  application:
    name: NareuGO_Backend

  profiles:
    active: local
    group:
      local: local,common
      blue: blue,common
      green: green,common

# 공통 설정
---
spring:
  config:
    activate:
      on-profile: common

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    open-in-view: false

  mybatis:
    mapper-locations: classpath*:mappers/**/*.xml
    type-aliases-package: org.example.nareugobackend.common.model
    configuration:
      map-underscore-to-camel-case: true

  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379
      password: ${REDIS_PASSWORD}

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${OAUTH2_KAKAO_CLIENT_ID}
            client-secret: ${OAUTH2_KAKAO_CLIENT_SECRET_KEY}
            client-authentication-method: client_secret_post
            authorization-grant-type: ${OAUTH2_KAKAO_GRANT_TYPE}
            redirect-uri: ${OAUTH2_KAKAO_LOGIN_REDIRECT_URI}
            scope: profile_nickname, profile_image, account_email
            client-name: Kakao
          naver:
            client-id: ${OAUTH2_NAVER_CLIENT_ID}
            client-secret: ${OAUTH2_NAVER_CLIENT_SECRET_KEY}
            client-authentication-method: client_secret_post
            authorization-grant-type: ${OAUTH2_NAVER_GRANT_TYPE}
            redirect-uri: ${OAUTH2_NAVER_LOGIN_REDIRECT_URI}
            scope: name, email, profile_image
            client-name: Naver
        provider:
          kakao:
            authorization-uri: ${OAUTH2_KAKAO_AUTHORIZATION_URL}
            token-uri: ${OAUTH2_KAKAO_TOKEN_URL}
            user-info-uri: ${OAUTH2_KAKAO_USER_INFO_URI}
            jwk-set-uri: ${OAUTH2_KAKAO_OIDC_JWK_SET_URI}
            user-name-attribute: id
          naver:
            authorization-uri: ${OAUTH2_NAVER_AUTHORIZATION_URL}
            token-uri: ${OAUTH2_NAVER_TOKEN_URL}
            user-info-uri: ${OAUTH2_NAVER_USER_INFO_URI}
            user-name-attribute: response


jwt:
  secret: ${JWT_SECRET}

cookie:
  domain: ${COOKIE_DOMAIN}
  secure-mode: true

host:
  frontend: ${HOST_FRONTEND}
  allowed-origins: ${HOST_ALLOWED_ORIGINS}
  login-success-redirect-url: /auth/success

mybatis:   # 위치고정
  mapper-locations: classpath*:mapper/**/*.xml
  type-aliases-package: org.example.nareugobackend.common.model
  configuration:
    map-underscore-to-camel-case: true



# ===========================================
# AWS S3 설정
# ===========================================
cloud:
  aws:
    credentials:
      access-key: ${CLOUD_AWS_CREDENTIALS_ACCESS_KEY}
      secret-key: ${CLOUD_AWS_CREDENTIALS_SECRET_KEY}
    s3:
      bucket: "a501"
      region: ${AWS_S3_REGION}       

# ===========================================
# 토스페이먼츠 결제 API 설정
# ===========================================
# 토스페이먼츠 API 연동을 위한 설정값들
# - secret-key: 토스페이먼츠에서 발급받은 시크릿 키 (환경 변수로 주입)
# - confirm-url: 토스페이먼츠 결제 승인 API 엔드포인트
payments:
  toss:
    secret-key: ${TOSS_SECRET_KEY} # 환경 변수로 시크릿 키 주입
    confirm-url: https://api.tosspayments.com/v1/payments/confirm

# ===========================================
# Clova OCR API 설정
# ===========================================
# 네이버 클라우드 플랫폼 Clova OCR API 연동 설정
# - api-url: Clova OCR API 엔드포인트
# - secret-key: Clova OCR에서 발급받은 시크릿 키 (환경 변수로 주입)
clova:
  ocr:
    api-url: ${CLOVA_OCR_API_URL} # Clova OCR API URL
    secret-key: ${CLOVA_OCR_SECRET_KEY} # 환경 변수로 시크릿 키 주입

# ===========================================
# Firebase 설정
# ===========================================
firebase:
  enabled: ${FIREBASE_ENABLED:false}
  service-account-key: firebase-service-account.json
  project-id: ${FIREBASE_PROJECT_ID:your-project-id}

# ===========================================
# ROS Bridge 설정
# ===========================================
# ROS2와의 WebSocket 통신을 위한 설정
ros:
  bridge:
    url: ${ROS_BRIDGE_URL:ws://localhost:9090} # ROS Bridge WebSocket URL
    timeout: ${ROS_BRIDGE_TIMEOUT:10000} # 연결 타임아웃 (ms)
    retry-attempts: ${ROS_BRIDGE_RETRY:3} # 재시도 횟수
    connection-pool-size: ${ROS_BRIDGE_POOL_SIZE:5} # 연결 풀 크기

# Local 환경
---
spring:
  config:
    activate:
      on-profile: local

server:
  port: ${SERVER_PORT_LOCAL}
  serverAddress: ${SERVER_ADDRESS_LOCAL}
  env: local

serverName: local_server

# Blue 환경
---
spring:
  config:
    activate:
      on-profile: blue

server:
  port: ${SERVER_PORT_BLUE}
  serverAddress: ${SERVER_ADDRESS_BLUE}
  env: blue

serverName: blue_server

# Green 환경
---
spring:
  config:
    activate:
      on-profile: green

server:
  port: ${SERVER_PORT_GREEN}
  serverAddress: ${SERVER_ADDRESS_GREEN}
  env: green

serverName: green_server
