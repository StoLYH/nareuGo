spring:
  application:
    name: NareuGO_Backend

  profiles:
    active: local
    group:
      local: local,common
      blue: blue,common
      green: green,common

# 공통 설정
---
spring:
  config:
    activate:
      on-profile: common

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true

  webflux:
    webclient:
      connect-timeout: 5000
      read-timeout: 10000
      write-timeout: 10000
  elasticsearch:
    uris: ${ES_URIS}
    username: ${ES_USER_NAME}
    password: ${ES_PASSWORD}

host:
  frontend: ${HOST_FRONTEND}
  allowed-origins: ${HOST_ALLOWED_ORIGINS}
  login-success-redirect-url: /auth/success

mybatis:
  mapper-locations: classpath*:mapper/**/*.xml
  type-aliases-package: org.example.nareugobackend.common.model
  configuration:
    map-underscore-to-camel-case: true

ros:
  robot:
    http-server:
      host: localhost
      port: 8888
      timeout: 5000
      connection-pool-size: 10

    status:
      check-interval: 10000
      connection-timeout: 30000
      retry-attempts: 3

    supported-robots:
      - id: "1"
        name: "NareuGO"
        type: "turtlebot3"
      - id: "2"
        name: "NareuGO2"
        type: "turtlebot3"

cloud:
  aws:
    credentials:
      access-key: ${CLOUD_AWS_CREDENTIALS_ACCESS_KEY}
      secret-key: ${CLOUD_AWS_CREDENTIALS_SECRET_KEY}
    s3:
      bucket: "a501"
      region: ${AWS_S3_REGION}

payments:
  toss:
    secret-key: ${TOSS_SECRET_KEY}
    confirm-url: https://api.tosspayments.com/v1/payments/confirm

clova:
  ocr:
    api-url: ${CLOVA_OCR_API_URL}
    secret-key: ${CLOVA_OCR_SECRET_KEY}

firebase:
  enabled: true
  service-account-key: firebase-service-account.json
  project-id: nareugo

# Local 환경
---
spring:
  config:
    activate:
      on-profile: local

server:
  port: ${SERVER_PORT_LOCAL}
  serverAddress: ${SERVER_ADDRESS_LOCAL}
  env: local

serverName: local_server

# Blue 환경
---
spring:
  config:
    activate:
      on-profile: blue

server:
  port: ${SERVER_PORT_BLUE}
  serverAddress: ${SERVER_ADDRESS_BLUE}
  env: blue

serverName: blue_server

# Green 환경
---
spring:
  config:
    activate:
      on-profile: green

server:
  port: ${SERVER_PORT_GREEN}
  serverAddress: ${SERVER_ADDRESS_GREEN}
  env: green

serverName: green_server