stages:
  - build
  - deploy

variables:
  JAR_NAME: live_server.jar
  DOCKER_IMAGE: $DOCKERHUB_USERNAME/a501   # 도커허브에 저장되는 이름

# ========================
# Build 단계 (CI)
# ========================
build:
  stage: build
  image: gradle:7-jdk11
  script:
    - cd "NareuGO_Backend"
    - chmod +x ./gradlew
    - ./gradlew clean build -x test
    - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
    - docker build --platform linux/amd64 -t $DOCKER_IMAGE:latest -f Dockerfile .
    - docker push $DOCKER_IMAGE:latest
  only:
    - master

# ========================
# Deploy 단계 (CD)
# ========================
deploy:
  stage: deploy
  before_script:
    - apt-get update -y && apt-get install -y openssh-client curl
    # SSH 키 세팅
    - mkdir -p ~/.ssh
    - echo "$EC2_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $LIVE_SERVER_IP >> ~/.ssh/known_hosts

  script:
    - |
      STATUS=$(curl -o /dev/null -w "%{http_code}" "http://$LIVE_SERVER_IP/env" || true)

      if [ "$STATUS" = "200" ]; then
        CURRENT_UPSTREAM=$(curl -s "http://$LIVE_SERVER_IP/env")
      else
        # 최초 배포 시 무조건 green부터 시작
        CURRENT_UPSTREAM=none
        TARGET_UPSTREAM=green
        CURRENT_PORT=0
        STOPPED_PORT=8081
      fi

      echo "현재 upstream: $CURRENT_UPSTREAM"

      if [ "$CURRENT_UPSTREAM" = "blue" ]; then
        CURRENT_PORT=8080
        STOPPED_PORT=8081
        TARGET_UPSTREAM=green
      elif [ "$CURRENT_UPSTREAM" = "green" ]; then
        CURRENT_PORT=8081
        STOPPED_PORT=8080
        TARGET_UPSTREAM=blue
      fi

      # GitLab 전역 환경변수 파일에 저장 (다음 명령에서도 사용됨)
      echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $CI_ENVIRONMENT_FILE
      echo "CURRENT_PORT=$CURRENT_PORT" >> $CI_ENVIRONMENT_FILE
      echo "STOPPED_PORT=$STOPPED_PORT" >> $CI_ENVIRONMENT_FILE
      echo "TARGET_UPSTREAM=$TARGET_UPSTREAM" >> $CI_ENVIRONMENT_FILE

      ssh -o StrictHostKeyChecking=no ubuntu@$LIVE_SERVER_IP "
        sudo docker pull $DOCKER_IMAGE:latest &&
        sudo docker-compose -f docker-compose-${TARGET_UPSTREAM}.yml up -d
      "

      curl --retry 15 --retry-delay 5 http://$LIVE_SERVER_IP:$STOPPED_PORT/env || exit 1

      ssh -o StrictHostKeyChecking=no ubuntu@$LIVE_SERVER_IP "
        sudo docker exec -i nginxserver bash -c 'echo \"set \\\$service_url ${TARGET_UPSTREAM};\" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'
      "

      if [ \"$CURRENT_UPSTREAM\" != \"none\" ]; then
        ssh -o StrictHostKeyChecking=no ubuntu@$LIVE_SERVER_IP "
          sudo docker stop ${CURRENT_UPSTREAM} && sudo docker rm ${CURRENT_UPSTREAM}
        "
      fi
  only:
    - master
